Phase: legende
Input: Token SpaceToken NatureMonnaie
Options: control = appelt

Macro:FIN_LIGNE
(
  ({SpaceToken.string=="\r"}{SpaceToken.string=="\n"})
  |({SpaceToken.string=="\n"}{SpaceToken.string=="\r"})
  |({SpaceToken.string=="\n"})
  |({SpaceToken.string=="\r"})
  )

Macro:LIGNE_PRECEDENTE
(
({NatureMonnaie}({SpaceToken.kind == space})?)(({Token})({SpaceToken.kind == space})?)*
)

Macro: LIAISON
(
    ({Token.string == "+"})
)

Macro: ESPACEMENT
(({SpaceToken})({SpaceToken})({SpaceToken})*)

Macro: LEGENDE
(
((({Token})({SpaceToken})?)*)
)

/**
* Description : Capture la légende d'une piece
* 
* Exemple : +AZER°OIR        ZUIZE EUIZ 
*/
Rule: LegendeRule
    (LIGNE_PRECEDENTE)
    (FIN_LIGNE)
(
    (LIAISON)?({SpaceToken})*(LEGENDE):droit(ESPACEMENT)(LIAISON)?({SpaceToken})*(LEGENDE):revers
):Legende
-->
:Legende{
           //En entree
 OffsetComparator comparator = new OffsetComparator();
 gate.AnnotationSet matchedDroit = (gate.AnnotationSet)bindings.get("droit");
 gate.AnnotationSet matchedRevers = (gate.AnnotationSet)bindings.get("revers");
 List<Annotation>   listDroit = new ArrayList<Annotation>(matchedDroit);
 List<Annotation>   listRevers = new ArrayList<Annotation>(matchedRevers);
 Collections.sort(listDroit, comparator);
 Collections.sort(listRevers, comparator);

 String legende_droit = "";
 String legendre_revers = "";

//On récupere chaque token séparés par les expaces
 for (Annotation ann :  listDroit) {
  legende_droit += (String)ann.getFeatures().get("string");
}
for (Annotation ann :  listRevers) {
  legendre_revers += (String)ann.getFeatures().get("string");
}

            //declaration d'annotation vide
gate.AnnotationSet matchedInter = (gate.AnnotationSet)bindings.get("Legende");
gate.FeatureMap newFeatures = Factory.newFeatureMap();
            //MAJ de l'annotation initialement vide
newFeatures.put("Kind","Legende");
newFeatures.put("Rule","LegendeRule");
newFeatures.put("Droit",legende_droit);
newFeatures.put("Revers",legendre_revers);

            //Validation de l'annotation et sortie
outputAS.add(matchedInter.firstNode(),matchedInter.lastNode(),"Legende",newFeatures);
}